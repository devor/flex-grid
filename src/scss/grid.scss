/*******************************
 *      DEVOR FLEX GRID        *
 *******************************
 */

$grid-columns: 12 !default;
$grid-max-width: 87.5rem !default;
$grid-gutter: 1rem !default;
$grid-sizes: (
  'sm' : 768px,
  'md' : 992px,
  'lg' : 1200px
) !default;

/*
 * PLACEHOLDERS
 */

// Flex containers usually live inside rows, are flexboxes, and have a max width.
@mixin flex-row {
  align-content: center;         // make all items in the container v align center, relative to the parent.
  align-items: flex-start;       // valign items to top by default
  display: flex;                 // use flexbox
  flex-direction: row;           // treat it as rows not columns, ltr.
  flex-wrap: wrap;               // let items wrap
  justify-content: flex-start;   // make items left align by default
  margin: 0 ( 0 - ($grid-gutter/2));
  width: calc(100% + #{$grid-gutter});
}

@mixin flex-col-auto {
  flex: auto;
  margin: 0 ($grid-gutter/2);
}


/*
 * MIXINS
 */

/**
 * Defines a grid column based off of size, breakpoint, and total columns.
 * @param   {number}  $size      -             Size of the column
 * @param   {number}  $columns  $grid-columns  The total number of columns in row.
 */
@mixin flex-col($size, $columns: $grid-columns) {
  $width: (100% / $columns * $size);
  $calc-width: calc(#{$width} - #{$grid-gutter});
  flex: 1 0 $calc-width;
  max-width: $calc-width;
  margin: 0 ($grid-gutter/2);
}


/**
 * Offset a grid column either left side or right side by a number of columns
 * @param   {number}  $offset
 * @param   {string}  $direction:  'left'
 * @param   {number}  $columns:    $grid-columns
 */
@mixin offset($offset, $direction: 'left', $columns: $grid-columns) {
  $dir: if($direction == 'left', 'left', 'right');

  margin-#{$dir}: calc(#{($offset/$columns * 100%)} + #{($grid-gutter / 2)});
}

/*
 * CLASSES
 */

// Containers hold rows
.container {
  margin: 0 auto;
  max-width: $grid-max-width;
  width: 100%;
  padding: 0 $grid-gutter/2;

  &--fluid {
    max-width: inherit;
  }
}


// Rows hold the columns
.row {
  @include flex-row;
  text-align: left;

  // ROW MODIFIERS
  &--align-around {
    justify-content: space-around;
  }

  &--align-between {
    justify-content: space-between;
  }

  &--align-start {
    justify-content: flex-start;
  }

  &--align-center {
    justify-content: center;
  }

  &--align-end {
    justify-content: flex-end;
  }

  &--valign-start {
    align-items: flex-start;
  }

  &--valign-center {
    align-items: center;
  }

  &--valign-end {
    align-items: flex-end;
  }

  &--valign-stretch {
    align-items: stretch;
  }
}


// Columns
.col {
  // auto columns will fill the remaing space in the container, can give the element a min-width and max-width.
  // .col == .col-auto == .col-xs-auto
  &,
  &-auto,
  &-xs-auto {
    @include flex-col-auto;
  }

  // Regular colums, xs are the same because everything is mobile first.
  @for $i from 1 through $grid-columns {
    &-xs-#{$i},
    &-#{$i} {
      @include flex-col($i);
    }
  }
  // Do our offsets
  @for $i from 1 through $grid-columns {
    &-xs-offset-#{$i},
    &-offset-#{$i} {
      @include offset($i)
    }
    &-xs-offset-right-#{$i},
    &-offset-right-#{$i} {
      @include offset($i, 'right')
    }
  }

  // Make a class for each breakpoint and each column within that breakpoint ie: .col-lg-12
  @each $size, $bp in $grid-sizes {
    @media only screen and (min-width: #{$bp}) {
      @for $i from 1 through $grid-columns {
        &-#{$size}-#{$i} {
          @include flex-col($i);
        }
        &-#{$size}-offset-#{$i} {
          margin-left:  ($i/$grid-columns * 100%);
        }
        &-#{$size}-offset-right-#{$i} {
          margin-right:  ($i/$grid-columns * 100%);
        }
      }
      &-#{$size}-auto {
        @include flex-col-auto;
      }
    }
  }

  // COL MODIFIERS
  &--valign-start {
    align-self: flex-start;
  }

  &--valign-center {
    align-self: center;
  }

  &--valign-end {
    align-self: flex-end;
  }

  &--valign-stretch {
    align-self: stretch;
  }
}
